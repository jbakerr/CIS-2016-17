elem.adjust <- progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% elem) & progress$Q1 < 50]
elem.adjust
elem.adjust <- (45-elem.adjust)/100
elem.adjust <- elem.adjust * 100
elem.adjust
elem.adjust <- (45-elem.adjust)/45
elem.adjust <- elem.adjust * 100
elem.adjust
elem.adjust <- progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% elem) & progress$Q1 < 50]
elem.adjust
elem.adjust <- (45-elem.adjust)/45
elem.adjust
elem.adjust <- elem.adjust * 100
elem.adjust
progress$Q1[progress$Metric == "Attendance Rate" & progress$School %in% elem & progress$Q1 < 50 & !is.na(progress$Q1)] <- elem.adjust
high.adjust <- progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1]
high.adjust <- high.adjust *100
progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1] <- high.adjust
#summary(subset(progress$Q1, progress$Metric == "Attendance Rate" & progress$School %in% high))
#Creating Names for each quarter / subject combination
#progress$Baseline <- NULL
progress <- gather(progress, Period, Value, Baseline:Q1, factor_key = T)
quartersubject <- paste(progress$Period, " ", progress$Metric, sep = " ")
progress$quartersubject <- quartersubject
progress$Period <- NULL
#removing duplicates
progress <- progress[!duplicated(progress[,c("School", "Student.Name","Metric", "Value")]), ] # This is a soft option that just deletes one of the duplicates arbitrarily
#Creating a wide data frame
progress_test <- spread(progress[, ! colnames(progress) %in% c("Metric", "Period")], quartersubject, Value)
View(progress_test)
progress <- spread(progress[, ! colnames(progress) %in% c("Metric", "Period")], quartersubject, Value)
write.csv(progress, "studentlist.csv")
#install.packages("dplyr") # These packages need to be installed once, after that they can be called up using library. This package is for restructuring data
#install.packages("XLConnect") # This package is for loading / writing excel spreadsheets
#install.packages("tidyr")
#install.packages("plyr")
library(plyr) # ****IMPORTANT**** Load plyr before dplyr- they have some of the same named functions, and if you load in a different order it will cause problems
library(dplyr)
library(tidyr)
library(XLConnect)
###################################      SERVICES DATA CHECK      ##########################################
# Set the working directory to the local folder containing dataset. Can be done manually
# by going to Session -> Set Working Directory -> Choose Directory
macdatawd <- "~/Google Drive/Data Files"
windowsdatawd <- "C:/Users/USER/Google Drive/Data Files"
if(file.exists(macdatawd)){
setwd(file.path(macdatawd))
} else {
if(file.exists(windowsdatawd)){
setwd(file.path(windowsdatawd))
}
}
#Setting Vectors that will be used throughout program
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "YE Smith Elementary")
high <- c("Neal Middle School", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
#Load Worksheet
progress<-readWorksheetFromFile('progress.xlsx', sheet=1, header = T, startRow = 1)
#Rename Grading Quarters
colnames(progress)[7:9] <- c("Q1", "Q2", "Q3")
#Removing Test Data
progress <- subset(progress, !progress$Case.Manager == "Nina Wilson")
progress <- subset(progress, !progress$Case.Manager == "Test Account")
#Changing Metric Title
progress$Metric[progress$Metric =='Core Course Grades: Eng/Lang Arts/Reading/Writing'] <- "ELA"
progress$Metric[progress$Metric =='Core Course Grades: Math 1'] <- "Math"
progress$Metric[progress$Metric =='Core Course Grades: Science'] <- "Science"
progress <- progress[ ! (progress$Metric =='Standardized test score: English / Language Arts'),]
progress <- progress[ ! (progress$Metric =='Standardized test score: Science'),]
#Dropping Unneeded Columns
progress$Latest.Progress <- NULL
progress$Target <- NULL
#for now dropping Q2 and Q3
progress$Q2 <- NULL
progress$Q3 <- NULL
#removing unwanted metrics
progress <- subset(progress, progress$Metric %in% metrics)
#Adjusting Attendance Rate from days to percentage NEED TO FIX TO ALLOW FOR MORE THAN 1 QUARTER OF DATA
elem.adjust <- progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% elem) & progress$Q1 < 50]
elem.adjust <- (45-elem.adjust)/45
elem.adjust <- elem.adjust * 100
progress$Q1[progress$Metric == "Attendance Rate" & progress$School %in% elem & progress$Q1 < 50 & !is.na(progress$Q1)] <- elem.adjust
high.adjust <- progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1]
high.adjust <- high.adjust *100
progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1] <- high.adjust
#summary(subset(progress$Q1, progress$Metric == "Attendance Rate" & progress$School %in% high))
#Creating Names for each quarter / subject combination
#progress$Baseline <- NULL
progress <- gather(progress, Period, Value, Baseline:Q1, factor_key = T)
quartersubject <- paste(progress$Period, " ", progress$Metric, sep = " ")
progress$quartersubject <- quartersubject
progress$Period <- NULL
#removing duplicates
progress <- progress[!duplicated(progress[,c("School", "Student.Name","Metric", "Value")]), ] # This is a soft option that just deletes one of the duplicates arbitrarily
#Creating a wide data frame
progress <- spread(progress[, ! colnames(progress) %in% c("Metric", "Period")], quartersubject, Value)
#Saving Data
write.csv(progress, "studentlist.csv")
#install.packages("dplyr") # These packages need to be installed once, after that they can be called up using library. This package is for restructuring data
#install.packages("XLConnect") # This package is for loading / writing excel spreadsheets
#install.packages("tidyr")
#install.packages("plyr")
library(plyr) # ****IMPORTANT**** Load plyr before dplyr- they have some of the same named functions, and if you load in a different order it will cause problems
library(dplyr)
library(tidyr)
library(XLConnect)
###################################      SERVICES DATA CHECK      ##########################################
# Set the working directory to the local folder containing dataset. Can be done manually
# by going to Session -> Set Working Directory -> Choose Directory
macdatawd <- "~/Google Drive/Data Files"
windowsdatawd <- "C:/Users/USER/Google Drive/Data Files"
if(file.exists(macdatawd)){
setwd(file.path(macdatawd))
} else {
if(file.exists(windowsdatawd)){
setwd(file.path(windowsdatawd))
}
}
#Setting Vectors that will be used throughout program
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "YE Smith Elementary")
high <- c("Neal Middle School", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
# This is the name I have been using for the detailed service dataset, however we may want to start using a different naming convention
# This is the "Tier II and III Support Detail" report.
# **** IMPORTANT ***** delete the last row that sums all hours before saving the excel file. That row will cause problems
data<-readWorksheetFromFile('ServiceD.xlsx', sheet=1, header = T, startRow = 2)
colnames(data)[1] <- "Student.ID"
data <- data[!is.na(data$Student.ID), ] # get rid of accidental blank rows
#removing Nina's test data
data <- subset(data, !data$Entered.By == "nina")
View(data)
colnames(data)
data_test <- subset(data, !colnames("Provider.Type.2","Provider.Name.2"))
data_test <- subset(data, colnames("Provider.Type.2","Provider.Name.2"))
data_test <- data[,-c("Provider.Type.2","Provider.Name.2")]
data_test <- subset(data, select = -c("Provider.Type.2", "Provider.Name.2"))
data_test <- subset(data, select = -c("Provider.Type.2", "Provider.Name.2"))
data_test <- subset(data, select = c("Provider.Type.2", "Provider.Name.2"))
View(data_test)
drops <- c("Provider.Type.2","Provider.Name.2")
data_test <- data[, ! names(data) %in% drops]
data_test <- data[, ! (names(data) %in% drops)]
drops <- c("Provider.Type.2","Provider.Name.2", "Provider.Type.3", "Provider.Name.3")
data_test <- data[, ! (names(data) %in% drops)]
data<- data[, ! (names(data) %in% drops)]
drops <- c("Provider.Type.2","Provider.Name.2", "Provider.Type.3", "Provider.Name.3", "Case.Management.Intensity.Level" )
data <- data[, ! (names(data) %in% drops)]
drops <- c("Provider.Type.2","Provider.Name.2", "Provider.Type.3", "Provider.Name.3", "Case.Management.Intensity.Level",  "School.Where..Support.Was.Provided" )
data <- data[, ! (names(data) %in% drops)]
d <- data %>% group_by(Home.School, Entry.Date, Support.Date, Provider.Type.1, Provider.Name.1, Individual.or.Group, Student.Support.Category,
Hours, Tier, Notes) %>% summarize(groupsize = n())
d$groupsize[(!is.na(d$setting)) & d$setting == "Individual"] <- 1
d$groupsize[(!is.na(d$Individual.or.Group)) & d$Individual.or.Group == "Individual"] <- 1
data <- merge(data, d, by = c("Home.School", "Entry.Date", "Support.Date", "Provider.Type.1", "Provider.Name.1", "Individual.or.Group", "Student.Support.Category",
"Hours", "Tier", "Notes"))
data$hoursspent <- data$Hours/data$groupsize
nstall.packages("plyr")
library(plyr) # ****IMPORTANT**** Load plyr before dplyr- they have some of the same named functions, and if you load in a different order it will cause problems
library(dplyr)
library(tidyr)
library(XLConnect)
###################################      SERVICES DATA CHECK      ##########################################
# Set the working directory to the local folder containing dataset. Can be done manually
# by going to Session -> Set Working Directory -> Choose Directory
macdatawd <- "~/Google Drive/Data Files"
windowsdatawd <- "C:/Users/USER/Google Drive/Data Files"
if(file.exists(macdatawd)){
setwd(file.path(macdatawd))
} else {
if(file.exists(windowsdatawd)){
setwd(file.path(windowsdatawd))
}
}
#Setting Vectors that will be used throughout program
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "YE Smith Elementary")
high <- c("Neal Middle School", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
# This is the name I have been using for the detailed service dataset, however we may want to start using a different naming convention
# This is the "Tier II and III Support Detail" report.
# **** IMPORTANT ***** delete the last row that sums all hours before saving the excel file. That row will cause problems
data<-readWorksheetFromFile('ServiceD.xlsx', sheet=1, header = T, startRow = 2)
colnames(data)[1] <- "Student.ID"
data <- data[!is.na(data$Student.ID), ] # get rid of accidental blank rows
#removing Nina's test data
data <- subset(data, !data$Entered.By == "nina")
drops <- c("Provider.Type.2","Provider.Name.2", "Provider.Type.3", "Provider.Name.3", "Case.Management.Intensity.Level",  "School.Where..Support.Was.Provided" )
data <- data[, ! (names(data) %in% drops)]
d <- data %>% group_by(Home.School, Entry.Date, Support.Date, Provider.Type.1, Provider.Name.1, Individual.or.Group, Student.Support.Category,
Hours, Tier, Notes) %>% summarize(groupsize = n())
View(d)
data <- data[!is.na(data$Student.ID), ] # get rid of accidental blank rows
data <- data[!is.na(data$Student.ID), ] # get rid of accidental blank rows
data <- data[!is.na(data$Student.Name), ] # get rid of accidental blank rows
#Setting Vectors that will be used throughout program
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "YE Smith Elementary")
high <- c("Neal Middle School", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
# This is the name I have been using for the detailed service dataset, however we may want to start using a different naming convention
# This is the "Tier II and III Support Detail" report.
# **** IMPORTANT ***** delete the last row that sums all hours before saving the excel file. That row will cause problems
data<-readWorksheetFromFile('ServiceD.xlsx', sheet=1, header = T, startRow = 2)
colnames(data)[1] <- "Student.ID"
data <- data[!is.na(data$Student.ID), ] # get rid of accidental blank rows
data <- data[!is.na(data$Student), ] # get rid of accidental blank rows
data<-readWorksheetFromFile('ServiceD.xlsx', sheet=1, header = T, startRow = 2)
colnames(data)[1] <- "Student.ID"
data[!is.na(data$Student.ID), ]
data <- data[!is.na(data$Student.ID), ][5000] # get rid of accidental blank rows
data[!is.na(data$Student.ID), ][5000]
data[!is.na(data$Student.ID), ][5000,]
data[!is.na(data$Student.ID), ][5814,]
is.na(data$Student.ID[5814,])
is.na(data[5814,])
data[5814,]
is.na(data[5814,])
!is.na(data[5814,])
is.na(data[584,])
sum(is.na(data))
sum(is.na(data$Student.ID))
sum(is.na(progress))
sum(is.na(progress$Student.Name))
sum(is.na(progress$`Q1   Attendance Rate`))
length(data())
length(data)
width(data)
count(data)
nrow(data)
data_test <- data[-nrow(data),]
View(data_test)
data <- data[!is.na(data$Student.ID), ]# get rid of accidental blank rows
data <- data[-nrow(data),] #removes summation row
#removing Nina's test data
data <- subset(data, !data$Entered.By == "nina")
drops <- c("Provider.Type.2","Provider.Name.2", "Provider.Type.3", "Provider.Name.3", "Case.Management.Intensity.Level",  "School.Where..Support.Was.Provided" )
data <- data[, ! (names(data) %in% drops)]
d <- data %>% group_by(Home.School, Entry.Date, Support.Date, Provider.Type.1, Provider.Name.1, Individual.or.Group, Student.Support.Category,
Hours, Tier, Notes) %>% summarize(groupsize = n())
d$groupsize[(!is.na(d$Individual.or.Group)) & d$Individual.or.Group == "Individual"] <- 1
data_test <- merge(data, d, by = c("Home.School", "Entry.Date", "Support.Date", "Provider.Type.1", "Provider.Name.1", "Individual.or.Group", "Student.Support.Category",
"Hours", "Tier", "Notes"))
View(data_test)
data_test <- merge(data, d, by = c("Home.School", "Entry.Date", "Support.Date", "Provider.Type.1", "Provider.Name.1", "Individual.or.Group", "Student.Support.Category",
"Hours", "Tier"))
s("tidyr")
#install.packages("plyr")
library(plyr) # ****IMPORTANT**** Load plyr before dplyr- they have some of the same named functions, and if you load in a different order it will cause problems
library(dplyr)
library(tidyr)
library(XLConnect)
###################################      SERVICES DATA CHECK      ##########################################
# Set the working directory to the local folder containing dataset. Can be done manually
# by going to Session -> Set Working Directory -> Choose Directory
macdatawd <- "~/Google Drive/Data Files"
windowsdatawd <- "C:/Users/USER/Google Drive/Data Files"
if(file.exists(macdatawd)){
setwd(file.path(macdatawd))
} else {
if(file.exists(windowsdatawd)){
setwd(file.path(windowsdatawd))
}
}
#Setting Vectors that will be used throughout program
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "YE Smith Elementary")
high <- c("Neal Middle School", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
# This is the name I have been using for the detailed service dataset, however we may want to start using a different naming convention
# This is the "Tier II and III Support Detail" report.
# **** IMPORTANT ***** delete the last row that sums all hours before saving the excel file. That row will cause problems
data<-readWorksheetFromFile('ServiceD.xlsx', sheet=1, header = T, startRow = 2)
colnames(data)[1] <- "Student.ID"
data <- data[!is.na(data$Student.ID), ]# get rid of accidental blank rows
data <- data[-nrow(data),] #removes summation row
#removing Nina's test data
data <- subset(data, !data$Entered.By == "nina")
drops <- c("Provider.Type.2","Provider.Name.2", "Provider.Type.3", "Provider.Name.3", "Case.Management.Intensity.Level",  "School.Where..Support.Was.Provided" )
data <- data[, ! (names(data) %in% drops)]
#
#
# d <- data %>% group_by(Home.School, Entry.Date, Support.Date, Provider.Type.1, Provider.Name.1, Individual.or.Group, Student.Support.Category,
#                        Hours, Tier, Notes) %>% summarize(groupsize = n())
# d$groupsize[(!is.na(d$Individual.or.Group)) & d$Individual.or.Group == "Individual"] <- 1
#
# data_test <- merge(data, d, by = c("Home.School", "Entry.Date", "Support.Date", "Provider.Type.1", "Provider.Name.1", "Individual.or.Group", "Student.Support.Category",
#                               "Hours", "Tier"))
# data$hoursspent <- data$Hours/data$groupsize
#
write.csv(data, "Services.csv")
stserv <- data %>% group_by(Student.ID) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), service_date = tail(End.Date, n =1) )
stserv <- data %>% group_by(Student.ID) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), )
stserv <- data %>% group_by(Student.ID) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), n =1) )
stserv <- data %>% group_by(Student.ID) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), n =1 )
View(stserv)
stserv <- data %>% group_by(Student) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), n =1 )
colnames(stserv)[1] <- "Student.Name"
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
View(stlist)
#install.packages("dplyr") # These packages need to be installed once, after that they can be called up using library. This package is for restructuring data
#install.packages("XLConnect") # This package is for loading / writing excel spreadsheets
#install.packages("tidyr")
#install.packages("plyr")
library(plyr) # ****IMPORTANT**** Load plyr before dplyr- they have some of the same named functions, and if you load in a different order it will cause problems
library(dplyr)
library(tidyr)
library(XLConnect)
###################################      SERVICES DATA CHECK      ##########################################
# Set the working directory to the local folder containing dataset. Can be done manually
# by going to Session -> Set Working Directory -> Choose Directory
macdatawd <- "~/Google Drive/Data Files"
windowsdatawd <- "C:/Users/USER/Google Drive/Data Files"
if(file.exists(macdatawd)){
setwd(file.path(macdatawd))
} else {
if(file.exists(windowsdatawd)){
setwd(file.path(windowsdatawd))
}
}
#Setting Vectors that will be used throughout program
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "YE Smith Elementary")
high <- c("Neal Middle School", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
# This is the name I have been using for the detailed service dataset, however we may want to start using a different naming convention
# This is the "Tier II and III Support Detail" report.
# **** IMPORTANT ***** delete the last row that sums all hours before saving the excel file. That row will cause problems
data<-readWorksheetFromFile('ServiceD.xlsx', sheet=1, header = T, startRow = 2)
colnames(data)[1] <- "Student.ID"
data <- data[!is.na(data$Student.ID), ]# get rid of accidental blank rows
data <- data[-nrow(data),] #removes summation row
#removing Nina's test data
data <- subset(data, !data$Entered.By == "nina")
drops <- c("Provider.Type.2","Provider.Name.2", "Provider.Type.3", "Provider.Name.3", "Case.Management.Intensity.Level",  "School.Where..Support.Was.Provided" )
data <- data[, ! (names(data) %in% drops)]
#
#
# d <- data %>% group_by(Home.School, Entry.Date, Support.Date, Provider.Type.1, Provider.Name.1, Individual.or.Group, Student.Support.Category,
#                        Hours, Tier, Notes) %>% summarize(groupsize = n())
# d$groupsize[(!is.na(d$Individual.or.Group)) & d$Individual.or.Group == "Individual"] <- 1
#
# data_test <- merge(data, d, by = c("Home.School", "Entry.Date", "Support.Date", "Provider.Type.1", "Provider.Name.1", "Individual.or.Group", "Student.Support.Category",
#                               "Hours", "Tier"))
# data$hoursspent <- data$Hours/data$groupsize
#
#Saving Data
write.csv(data, "Services.csv")
#install.packages("dplyr") # These packages need to be installed once, after that they can be called up using library. This package is for restructuring data
#install.packages("XLConnect") # This package is for loading / writing excel spreadsheets
#install.packages("tidyr")
#install.packages("plyr")
library(plyr) # ****IMPORTANT**** Load plyr before dplyr- they have some of the same named functions, and if you load in a different order it will cause problems
library(dplyr)
library(tidyr)
library(XLConnect)
###################################      SERVICES DATA CHECK      ##########################################
# Set the working directory to the local folder containing dataset. Can be done manually
# by going to Session -> Set Working Directory -> Choose Directory
macdatawd <- "~/Google Drive/Data Files"
windowsdatawd <- "C:/Users/USER/Google Drive/Data Files"
if(file.exists(macdatawd)){
setwd(file.path(macdatawd))
} else {
if(file.exists(windowsdatawd)){
setwd(file.path(windowsdatawd))
}
}
#Setting Vectors that will be used throughout program
metrics <- c("Math","Science","ELA", "Suspensions", "Attendance Rate")
elem <- c("Glenn Elementary School", "Eno Valley Elementary", "EK Powe Elementary School", "YE Smith Elementary")
high <- c("Neal Middle School", "Durham Performance Learning Center", "Hillside High School", "Southern High School", "Northern")
#Load Worksheet
progress<-readWorksheetFromFile('progress.xlsx', sheet=1, header = T, startRow = 1)
#Rename Grading Quarters
colnames(progress)[7:9] <- c("Q1", "Q2", "Q3")
#Removing Test Data
progress <- subset(progress, !progress$Case.Manager == "Nina Wilson")
progress <- subset(progress, !progress$Case.Manager == "Test Account")
#Changing Metric Title
progress$Metric[progress$Metric =='Core Course Grades: Eng/Lang Arts/Reading/Writing'] <- "ELA"
progress$Metric[progress$Metric =='Core Course Grades: Math 1'] <- "Math"
progress$Metric[progress$Metric =='Core Course Grades: Science'] <- "Science"
progress <- progress[ ! (progress$Metric =='Standardized test score: English / Language Arts'),]
progress <- progress[ ! (progress$Metric =='Standardized test score: Science'),]
#Dropping Unneeded Columns
progress$Latest.Progress <- NULL
progress$Target <- NULL
#for now dropping Q2 and Q3
progress$Q2 <- NULL
progress$Q3 <- NULL
#removing unwanted metrics
progress <- subset(progress, progress$Metric %in% metrics)
#Adjusting Attendance Rate from days to percentage NEED TO FIX TO ALLOW FOR MORE THAN 1 QUARTER OF DATA
elem.adjust <- progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% elem) & progress$Q1 < 50]
elem.adjust <- (45-elem.adjust)/45
elem.adjust <- elem.adjust * 100
progress$Q1[progress$Metric == "Attendance Rate" & progress$School %in% elem & progress$Q1 < 50 & !is.na(progress$Q1)] <- elem.adjust
high.adjust <- progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1]
high.adjust <- high.adjust *100
progress$Q1[progress$Metric == "Attendance Rate" & !is.na(progress$Q1) & (progress$School %in% high) & progress$Q1 < 1] <- high.adjust
#summary(subset(progress$Q1, progress$Metric == "Attendance Rate" & progress$School %in% high))
#Creating Names for each quarter / subject combination
#progress$Baseline <- NULL
progress <- gather(progress, Period, Value, Baseline:Q1, factor_key = T)
quartersubject <- paste(progress$Period, " ", progress$Metric, sep = " ")
progress$quartersubject <- quartersubject
progress$Period <- NULL
#removing duplicates
progress <- progress[!duplicated(progress[,c("School", "Student.Name","Metric", "Value")]), ] # This is a soft option that just deletes one of the duplicates arbitrarily
#Creating a wide data frame
progress <- spread(progress[, ! colnames(progress) %in% c("Metric", "Period")], quartersubject, Value)
#Saving Data
write.csv(progress, "studentlist.csv")
stserv <- data %>% group_by(Student) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), n =1 )
View(stlist)
View(stserv)
View(progress)
View(data)
names <- strsplit(data$Student, ", ")
unlist(lapply(names,
function(x) paste(x[1:length(x) %% 2 == 0],
x[1:length(x) %% 2 != 0])))
names()
names
names <- strsplit(data$Student, ", ")
names <- unlist(lapply(names,
function(x) paste(x[1:length(x) %% 2 == 0],
x[1:length(x) %% 2 != 0])))
names
data$Student <- strsplit(data$Student, ", ")
data$Student <- unlist(lapply(names,
function(x) paste(x[1:length(x) %% 2 == 0],
x[1:length(x) %% 2 != 0])))
stserv <- data %>% group_by(Student) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), n =1 )
View(stserv)
colnames(stserv)[1] <- "Student.Name"
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
View(stlist)
stserv <- data %>% group_by(Student) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID) )
colnames(stserv)[1] <- "Student.Name"
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
View(stlist)
stserv <- data %>% group_by(Student) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID), n =1 )
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
colnames(stserv)[1] <- "Student.Name"
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
View(stlist)
View(progress)
colnames(stserv)[1] <- "Student.Name"
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
stserv <- data %>% group_by(Student) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID) )
colnames(stserv)[1] <- "Student.Name"
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
?merge
stlist <- merge(progress, stserv, by = "Student.Name", all = F)
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
colnames(progress)[3]
colnames(stserv)[1] <- "Student.Name"
colnames(progress)[3] <- "Student.Name"
stlist <- merge(progress, stserv, by = "Student.Name", all = T)
untion(stserv$Student.Name, progress$Student.Name)
union(stserv$Student.Name, progress$Student.Name)
stlist <- merge(progress, stserv, by = "Student.Name", all.x = T)
stlist <- merge(progress, stserv, by = "Student.Name", all.y = T)
stlist <- merge(progress, stserv, by = "Student.Name", all.x = T, all.y = F)
union(stserv$Student.Name, progress$Student.Name)
stlist <- merge(progress, stserv, by = "Student.Name", all.x = T, all.y = T)
length(which(duplicated(a.one.qtr)))
length(which(duplicated(stserv)))
length(which(duplicated(progress)))
stlist <- merge(stserv, progress by = "Student.Name", all.x = T, all.y = T)
stlist <- merge(stserv, progress by = "Student.Name", all = T)
stlist <- merge(stserv, progress, by = "Student.Name", all = T)
stlist <- merge(progress, stserv , by = "Student.Name", all = T)
stlist <- merge(progress, stserv , by = "Student.Name", all.y  = T)
stlist <- merge(progress, stserv , by = "Student.Name", all.y  = F)
stlist <- merge(progress, stserv , by = "Student.Name", all.x  = T)
stlist <- merge(stserv, progress , by = "Student.Name", all.x  = T)
stlist <- merge(progress, stserv , by = "Student.Name", all.x  = F)
stlist <- merge(stserv, progress , by = "Student.Name", all.x  = F)
union(stserv$Student.Name, progress$Student.Name)
?union
union(stserv$Student.Name %in% progress$Student.Name
stserv$Student.Name %in% progress$Student.Name
progress$Student.Name %in% stserv$Student.Name
"Abigail Edgerton" == "Abigail Edgerton""
"Abigail Edgerton" == "Abigail Edgerton""
"Abigail Edgerton" = "Abigail Edgerton""
4=4
isTRUE(4=4)
identical("Abigail Edgerton", "Abigail Edgerton"")
identical("Abigail Edgerton", "Abigail Edgerton')
identical("Abigail Edgerton", "Abigail Edgerton")
stserv$Student.Name[1]
identical(stserv$Student.Name[1], progress$Student.Name[1])
identical(stserv$Student.Name[1], progress$Student.Name[33])
identical(stserv$Student.Name[1], progress$Student.Name[33])
progress$Student.Name[33])
progress$Student.Name[33]
str(progress$Student.Name)
str(stserv$Student.Name)
progress$Student.Name[33]
identical(stserv$Student.Name[1], progress$Student.Name[33])
progress$Student.Name[33]
stserv$Student.Name[1]
?trwms
data$Student <- trimws(data$Student)
stserv <- data %>% group_by(Student) %>% summarize(Hours = sum(Hours), num_serv = length(Student.ID) )
stserv <- merge(stserv, checkcounts, by = "Student.ID", all = T)
stlist <- merge(progress, stserv , by = "Student.Name", all = T)
colnames(stserv)[1] <- "Student.Name"
colnames(progress)[3] <- "Student.Name"
stlist <- merge(progress, stserv , by = "Student.Name", all = T)
write.csv(progress, "studentlist.csv")
progress <- merge(progress, stserv , by = "Student.Name", all = T)
write.csv(progress, "studentlist.csv")
